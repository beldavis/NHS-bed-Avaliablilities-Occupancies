
/*
CLEANING DATA
*/

-- Standardizing Date Format

-- I will take a look at the data
SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

-- The sales date also has the timestamp with it, and I will like to take that off to just have the data alone
SELECT 
	SaleDate,
	CONVERT(date, SaleDate)
FROM PortfolioProject.dbo.NashvilleHousing

UPDATE PortfolioProject.dbo.NashvilleHousing
SET SaleDate = CONVERT(date, SaleDate)

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

-- The above query did not update. I am not sure why, but I will try another method by adding a new column and iupdating it

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD SaleDateConverted Date

UPDATE PortfolioProject.dbo.NashvilleHousing
SET SaleDateConverted = CONVERT(date, SaleDate)

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing
-- It worked

-- Populate Property Address Data
-- First you will notice that there are some missing addresses. We will try and see how many null values we have here

SELECT 
	PropertyAddress
FROM PortfolioProject.dbo.NashvilleHousing
WHERE PropertyAddress IS NULL

-- Looking at the ParcelID column, every unique parcelID has similar addresses with property address. I could use this as a reference point eg row
-- 44 and 45
SELECT 
	ParcelID,
	PropertyAddress
FROM PortfolioProject.dbo.NashvilleHousing
ORDER BY parcelID

-- So I will join the table to itself, where the ParcelID will be the same but the Unique ID will not . So as to see the addresses missing 
-- Then i will use ISNULL to identify all missing values and replaces it with corresponding data from the other property address
SELECT 
	a.UniqueID,
	b.UniqueID,
	a.ParcelID,
	a.PropertyAddress,
	b.ParcelID,
	b.PropertyAddress
FROM PortfolioProject.dbo.NashvilleHousing AS a
JOIN PortfolioProject.dbo.NashvilleHousing AS b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID] 
WHERE b.PropertyAddress IS NULL



SELECT 
	a.UniqueID,
	b.UniqueID,
	a.ParcelID,
	a.PropertyAddress,
	b.ParcelID,
	b.PropertyAddress,
	ISNULL(a.PropertyAddress,b.PropertyAddress) as Cleaned_Property_Address
FROM PortfolioProject.dbo.NashvilleHousing AS a
JOIN PortfolioProject.dbo.NashvilleHousing AS b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID] 
WHERE a.PropertyAddress IS NULL

-- SO now i will updated 
UPDATE a
SET a.PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM PortfolioProject.dbo.NashvilleHousing AS a
JOIN PortfolioProject.dbo.NashvilleHousing AS b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID] 
WHERE a.PropertyAddress IS NULL


-- Let us see if it worked

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing
Where Propertyaddress is NULL

-- Yes it worked


-- Breaking Out Address Into Individual Columns (Address, City, State)

SELECT 
	Propertyaddress
FROM PortfolioProject.dbo.NashvilleHousing


SELECT 
SUBSTRING(Propertyaddress, 1, CHARINDEX(',', Propertyaddress)) as Address
FROM PortfolioProject.dbo.NashvilleHousing

-- I will need to remove ',' from our result. i just need to insert '-1' in our queyry  

SELECT 
SUBSTRING(Propertyaddress, 1, CHARINDEX(',', Propertyaddress)-1) as Address
FROM PortfolioProject.dbo.NashvilleHousing

-- Now we have gotten the address, let us move on to getting City

SELECT 
	SUBSTRING(Propertyaddress, 1, CHARINDEX(',', Propertyaddress)-1) as Address,
	SUBSTRING(Propertyaddress, CHARINDEX(',', Propertyaddress)+1, LEN(Propertyaddress)) as City
FROM PortfolioProject.dbo.NashvilleHousing

-- Now let us insert two columns and update it with the new addresses and cities

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD PropertySplitAddress Nvarchar(255);

UPDATE PortfolioProject.dbo.NashvilleHousing
SET PropertySplitAddress = SUBSTRING(Propertyaddress, 1, CHARINDEX(',', Propertyaddress)-1)

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD PropertySplitCity Nvarchar(255);

UPDATE PortfolioProject.dbo.NashvilleHousing
SET PropertySplitCity = SUBSTRING(Propertyaddress, CHARINDEX(',', Propertyaddress)+1, LEN(Propertyaddress))

-- LET SEE IF IT WORKS

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing


-- I WILL BE USING THE PARSENAME METHOD
-- PARSENAME WORKS WITH PERIOD '.' SO I WILL CONVERT OR REPLACE ALL ',' TO '.'

SELECT 
	OwnerAddress
FROM PortfolioProject.dbo.NashvilleHousing
Where OwnerAddress is not null


SELECT 
	PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
	PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
	PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
FROM PortfolioProject.dbo.NashvilleHousing

-- Now let us insert two columns and update it with the new addresses and cities

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD OwnerSplitAddress Nvarchar(255);

UPDATE PortfolioProject.dbo.NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD OwnerSplitCity Nvarchar(255);

UPDATE PortfolioProject.dbo.NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD OwnerSplitState Nvarchar(255);

UPDATE PortfolioProject.dbo.NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

-- Change Y & N to Yes and No in "Sold as vacant" Field

SELECT 
	DISTINCT(SoldAsVacant),
	COUNT(SoldAsVacant)
FROM PortfolioProject.dbo.NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY 2

SELECT 
	SoldASVacant,
	CASE 
		WHEN SoldAsVacant = 'Y' THEN 'Yes'
		WHEN SoldAsVacant = 'N' THEN 'No'
		ELSE SoldAsVacant 
		END
FROM PortfolioProject.dbo.NashvilleHousing

UPDATE PortfolioProject.dbo.NashvilleHousing
SET SoldAsVacant = CASE 
						WHEN SoldAsVacant = 'Y' THEN 'Yes'
						WHEN SoldAsVacant = 'N' THEN 'No'
						ELSE SoldAsVacant 
						END

SELECT 
	DISTINCT(SoldAsVacant),
	COUNT(SoldAsVacant)
FROM PortfolioProject.dbo.NashvilleHousing
GROUP BY SoldAsVacant

-- REMOVE DUPLICATE
-- We need to see if we have duplicate values


SELECT 
	*,
	ROW_NUMBER() OVER (PARTITION BY ParcelID,
									PropertyAddress,
									SalePrice,
									SaleDate,
									LegalReference
									ORDER BY UniqueID
									) as row_num
FROM PortfolioProject.dbo.NashvilleHousing

-- So I will be creating a CTE so i can use the where clause so the duplicate.

WITH ROW_NUMCTE AS(
SELECT 
	*,
	ROW_NUMBER() OVER (PARTITION BY ParcelID,
									PropertyAddress,
									SalePrice,
									SaleDate,
									LegalReference
									ORDER BY UniqueID
									) as row_num
FROM PortfolioProject.dbo.NashvilleHousing
)
SELECT *
FROM ROW_NUMCTE
WHERE row_num > 1
ORDER BY PropertyAddress

-- From this we have 104 duplicates 

WITH ROW_NUMCTE AS(
SELECT 
	*,
	ROW_NUMBER() OVER (PARTITION BY ParcelID,
									PropertyAddress,
									SalePrice,
									SaleDate,
									LegalReference
									ORDER BY UniqueID
									) as row_num
FROM PortfolioProject.dbo.NashvilleHousing
)
SELECT *
FROM ROW_NUMCTE
WHERE row_num > 1
ORDER BY PropertyAddress


-- Now I will delete all duplicates

WITH ROW_NUMCTE AS(
SELECT 
	*,
	ROW_NUMBER() OVER (PARTITION BY ParcelID,
									PropertyAddress,
									SalePrice,
									SaleDate,
									LegalReference
									ORDER BY UniqueID
									) as row_num
FROM PortfolioProject.dbo.NashvilleHousing
)
DELETE
FROM ROW_NUMCTE
WHERE row_num > 1

-- DELETING UNUSED COLUMNS

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
DROP COLUMN OwnerAddress,
			TaxDistrict, 
			PropertyAddress, 
			SaleDate
